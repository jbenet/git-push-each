#!/bin/sh

usage="USAGE
    $0 [--clean] [<remote> [<branch-prefix>]]
    push each commit from stdin to its own branch.

DESCRIPTION
    Read commit <sha1> hashes from stdin, one per line, and
    for each one, push a branch to <remote>.
    The branch is named following the <branch-prefix>-<sha1>
    pattern and points to <sha1>.
    By default <branch-prefix> is 'gpe-' and <remote> is
    'origin'.

OPTIONS
    --clean   delete all branches matching pattern:
              <branch-prefix><hash>

    --dry-run print out the commands to issue, but
              do not run them. has no effect.

EXAMPLE
    > git cherry master | git push-each
    > git branch -r
    origin/gpe-18c4051fc502da15c3c279c37630f6d152ad6b3d
    origin/gpe-22ac071150daf8994f4891d57caeef3b4caf2571
    origin/master

    > git push-each --clean
    > git branch -r
    origin/master"

# defaults
remote="origin"
prefix="gpe-"

die() {
	echo >&2 "$@"
	exit 1
}

clean=0
dryrun=0

while [ $# -gt 0 ]; do
	# get options
	arg="$1"
	case "$arg" in
	--help)
		echo "$usage"
		exit 0 ;;
	--clean)
		clean=1
		shift ;;
	--dry-run)
		dryrun=1
		shift ;;
	--*)
		die "Unrecognised option: '$arg'\n$usage" ;;
	*)
		# get args
		case "$#" in
		2)
			remote=$1
			shift
			prefix=$1
			shift ;;
		1)
			remote=$1
			shift ;;
		*)
			die "Too many arguments: '$@'\n$usage" ;;
		esac ;;
	esac
done

test -n "$remote" || die "Empty <remote> argument\n$usage"
test -n "$prefix" || die "Empty <branch-prefix> argument\n$usage"

# clean up mode
if [ $clean -eq 1 ]; then
	spec="($prefix[0-9a-fA-F]{40})"
	temp=$(mktemp) || die "mktemp failed"
	git branch -r >"$temp" || die "Could not list remote branches"
	for line in $(egrep -wo "$remote/$spec" "$temp" | egrep -o "$spec")
	do
		echo "git push $remote :$line"
		if [ $dryrun -eq 0 ]; then
			git push "$remote" ":$line" || die "Could not git push '$remote' ':$line'"
		fi
	done
	rm "$temp"
	exit 0
fi

# push mode
for line in $(egrep -wo [0-9a-fA-F]{40})
do
	spec="$line:refs/heads/$prefix$line"
	echo "git push $remote $spec"
	if [ $dryrun -eq 0 ]; then
		git push "$remote" "$spec" || die "Could not git push '$remote' '$spec'"
	fi
done
